'use strict';

var _vinylSourcemapsApply = require('vinyl-sourcemaps-apply');

var _vinylSourcemapsApply2 = _interopRequireDefault(_vinylSourcemapsApply);

var _pluginError = require('plugin-error');

var _pluginError2 = _interopRequireDefault(_pluginError);

var _isFn = require('is-fn');

var _isFn2 = _interopRequireDefault(_isFn);

var _rework = require('rework');

var _rework2 = _interopRequireDefault(_rework);

var _reworkPluginFunction = require('rework-plugin-function');

var _reworkPluginFunction2 = _interopRequireDefault(_reworkPluginFunction);

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transforms URLs in files
 * @param {String} filePath - path of CSS file that may be used by options.modify
 * @param {String} fileContents - contents of the file at filePath
 * @param {Boolean} sourcemap - is sourcemap enabled for this file?
 * @param {Object} [options={}] - rules for modifying URLs
 * @param {String} [options.append] - URLs are appended with this value
 * @param {Function} [options.modify] - This function is always called before append and prepend
 * @param {String} [options.prepend] - URLs are prepended with this value
 * @return {String} - transformed URL
 */
var modifyUrls = function modifyUrls(filePath, fileContents, sourcemap) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var append = options.append,
      modify = options.modify,
      prepend = options.prepend;


  return (0, _rework2.default)(fileContents, { source: filePath }).use((0, _reworkPluginFunction2.default)({
    url: function url(_url) {
      /**
       * The split/join/trim logic is copied from rework-plugin-url to remove redundant quotes.
       * Currently removed due to: https://github.com/reworkcss/rework-plugin-url/issues/7
       */
      if (_url.indexOf('data:') === 0) {
        return 'url("' + _url + '")';
      }

      var formattedUrl = _url.split('"').join('').split('\'').join('').trim();

      if ((0, _isFn2.default)(modify)) {
        formattedUrl = modify(formattedUrl, filePath);
      }

      if (typeof prepend === 'string') {
        formattedUrl = prepend + formattedUrl;
      }

      if (typeof append === 'string') {
        formattedUrl += append;
      }

      return 'url("' + formattedUrl + '")';
    }
  }, false)).toString({ sourcemap: sourcemap, sourcemapAsObject: true });
};

/**
 * Pushes along files with transformed URLs
 * @param {Object} [options] - same as described for modifyUrls function
 * @return {Stream} - file with transformed URLs
 */
module.exports = function (options) {
  return _through2.default.obj(function (file, enc, cb) {
    try {
      /* eslint no-invalid-this: 0 */
      var modifiedContents = modifyUrls(file.path, file.contents.toString(), file.sourceMap, options);

      if (file.sourceMap) {
        file.contents = Buffer.from(modifiedContents.code);
        modifiedContents.map.file = file.path;
        (0, _vinylSourcemapsApply2.default)(file, modifiedContents.map);
      } else {
        file.contents = Buffer.from(modifiedContents);
      }

      this.push(file);

      return cb();
    } catch (e) {
      return cb(new _pluginError2.default('modify-css-urls', e));
    }
  });
};